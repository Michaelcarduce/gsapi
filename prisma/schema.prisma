// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ARTIST
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
  Completed
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  role          Role      @default(CLIENT)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  Account       Account[]
  Session       Session[]
  Artist        Artist[]
  ClientBooking Booking[] @relation("clientBooking")
  ArtistBooking Booking[] @relation("artistBooking")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime
  updatedAt DateTime

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String @id @default(cuid())
  identifier String
  value      String
  expiresAt  String
  createdAt  String
  updatedAt  String
}

model Artist {
  id                   String  @id @default(cuid())
  userId               String
  bio                  String
  // hourlyRate      Int
  experienceYears      Int     @map("experience_years")
  location             String  @db.VarChar(255)
  availabilitySchedule Json
  rating               Decimal

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Service Service[]
}

model Service {
  id            Int      @id @default(autoincrement())
  artistId      String
  name          String   @db.VarChar(255)
  description   String
  price         Decimal
  durationHours Int      @map("duration_hours")
  // category      String  @db.VarChar(100)
  isActive      Boolean  @map("is_active")
  createdAt     DateTime
  updatedAt     DateTime

  Artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  Booking Booking[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  clientId    String
  artistId    String
  serviceId   Int
  bookingDate DateTime
  startTime   DateTime      @map("start_time") @db.Time()
  endTime     DateTime      @map("end_time") @db.Time()
  price       Decimal
  status      BookingStatus @default(Pending)
  location    String        @db.VarChar(255)
  createdAt   DateTime
  updatedAt   DateTime

  // ref: https://github.com/prisma/prisma/discussions/13341
  Client  User    @relation(fields: [clientId], references: [id], name: "clientBooking", onDelete: Cascade)
  Artist  User    @relation(fields: [artistId], references: [id], name: "artistBooking", onDelete: Cascade)
  Service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}
