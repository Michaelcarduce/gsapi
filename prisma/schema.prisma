// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  artist
}

enum AvailabilityStatus {
  available
  unavailable
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
  Completed
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String
  role          Role           @default(client)
  emailVerified Boolean        @default(false)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessions      Session[]
  accounts      Account[]
  artist        Artist[]
  clientBooking Booking[]      @relation("clientBooking")
  artistBooking Booking[]      @relation("artistBooking")
  Location      UserLocation[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Artist {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  // hourlyRate      Int
  experienceYears Decimal? @map("experience_years")
  // location        String  @db.VarChar(255)
  // availabilitySchedule Json
  // rating          Decimal?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  service                     Service[]
  Availability                Availability[]
  RecurringAvailability       RecurringAvailability[]
  ArtistServiceAreas          ArtistServiceAreas[]
  artistPreferredServiceAreas ArtistPreferredServiceAreas[]

  @@map("artists")
}

model Service {
  id            Int      @id @default(autoincrement())
  artistId      String
  name          String   @db.VarChar(255)
  description   String
  price         Decimal
  durationHours Int      @map("duration_hours")
  // category      String   @db.VarChar(100)
  isActive      Boolean  @map("is_active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  booking Booking[]

  @@map("services")
}

model Booking {
  id          Int           @id @default(autoincrement())
  clientId    String
  artistId    String
  serviceId   Int
  bookingDate DateTime
  startTime   DateTime      @map("start_time") @db.Time
  endTime     DateTime      @map("end_time") @db.Time
  price       Decimal
  status      BookingStatus @default(Pending)
  location    String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // ref: https://github.com/prisma/prisma/discussions/13341
  client  User    @relation(fields: [clientId], references: [id], name: "clientBooking", onDelete: Cascade)
  artist  User    @relation(fields: [artistId], references: [id], name: "artistBooking", onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Availability {
  id        Int                @id @default(autoincrement())
  artistId  String
  startTime DateTime           @map("start_time") @db.Time
  endTime   DateTime           @map("end_time") @db.Time
  date      DateTime           @db.Date
  timezone  String             @default("UTC")
  status    AvailabilityStatus @default(available)
  notes     String?            @db.VarChar(255)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([artistId, date])
  @@index([artistId, status])
  @@map("availabilities")
}

model RecurringAvailability {
  id        Int      @id @default(autoincrement())
  artistId  String
  dayOfWeek Int      @map("day_of_week") // 1 for Monday, 7 for Sunday 
  startTime DateTime @map("start_time") @db.Time
  endTime   DateTime @map("end_time") @db.Time
  timezone  String   @default("UTC")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artistId, dayOfWeek], name: "artistId_dayOfWeek")
  @@index([artistId, dayOfWeek, isActive])
  @@map("recurring_availabilities")
}

/**
 * location field ref:
 * https://github.com/prisma/prisma/issues/2789
 * https://medium.com/@vitaly.bexterev12/prisma-with-coordinate-473f48342060
 * https://freddydumont.com/blog/prisma-postgis
 */
model UserLocation {
  id         String                               @id @default(cuid())
  userId     String
  address    String                               @db.VarChar(100)
  state      String                               @db.VarChar(100)
  city       String                               @db.VarChar(100)
  country    String                               @db.VarChar(100)
  postalCode String                               @map("postal_code") @db.VarChar(20)
  latitude   Decimal                              @db.Decimal(10, 8)
  longitude  Decimal                              @db.Decimal(11, 8)
  location   Unsupported("geography(Point,4326)")
  createdAt  DateTime                             @default(now())
  updatedAt  DateTime                             @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ArtistServiceAreas ArtistServiceAreas[]

  @@map("users_location")
}

model ArtistServiceAreas {
  id                        String   @id @default(cuid())
  artistId                  String
  locationId                String
  travelRadiusKm            Int      @map("travel_radius_km")
  manualAcceptOutsideRadius Boolean  @default(false) @map("manual_accept_outside_radius")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  artist   Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  location UserLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([artistId, locationId])
  @@map("artist_service_areas")
}

model ArtistPreferredServiceAreas {
  id        String   @id @default(cuid())
  artistId  String
  city      String
  state     String?
  country   String
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  createdAt DateTime @default(now())

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artistId, city, state, country])
  @@map("artist_preferred_service_areas")
}
